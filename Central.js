// Generated by CoffeeScript 1.10.0
define(function() {
  var PromisedEventData, PromisedTunnels, SimpleTunnels, emit, emit_promised, listen;
  SimpleTunnels = {};
  PromisedTunnels = {};
  PromisedEventData = (function() {
    function PromisedEventData(arg) {
      var handlers, last_args;
      last_args = arg.last_args, handlers = arg.handlers;
      this.last_args = last_args || null;
      this.handlers = handlers || [];
    }

    return PromisedEventData;

  })();
  emit = function(tunnel_name, event_name, event_args) {
    var handler, handlers, i, len, tunnel;
    console.log("Central.emit \t ", tunnel_name, event_name, event_args);
    tunnel = SimpleTunnels[tunnel_name];
    if (!tunnel) {
      console.warn("Central.emit \t no listeners in tunnel", tunnel_name);
      return;
    }
    handlers = tunnel[event_name];
    if (!handlers) {
      console.warn("Central.emit \t no listeners in tunnel", tunnel_name, "on event", event_name);
      return;
    }
    for (i = 0, len = handlers.length; i < len; i++) {
      handler = handlers[i];
      handler.apply(null, event_args);
    }
  };
  emit_promised = function(tunnel_name, event_name, event_args) {
    var event_data, handler, handlers, i, len, tunnel;
    console.log("Central.emit_promised \t ", tunnel_name, event_name, event_args);
    tunnel = PromisedTunnels[tunnel_name];
    if (!tunnel) {
      if (tunnel = SimpleTunnels[tunnel_name]) {
        console.info("Central.emit_promised upgrading tunnel");
        PromisedTunnels[tunnel_name] = tunnel;
        SimpleTunnels[tunnel_name] = null;
      } else {
        PromisedTunnels[tunnel_name] = tunnel = {};
      }
    }
    if (event_data = tunnel[event_name]) {
      event_data.last_args = event_args;
      handlers = event_data.handlers;
      for (i = 0, len = handlers.length; i < len; i++) {
        handler = handlers[i];
        handler.apply(null, event_args);
      }
    } else {
      tunnel[event_name] = new PromisedEventData({
        last_args: event_args
      });
    }
  };
  listen = function(tunnel_name, event_name, handler) {
    var event_data, handlers, last_args, tunnel;
    tunnel = null;
    if (PromisedTunnels[tunnel_name]) {
      tunnel = PromisedTunnels[tunnel_name];
      if (event_data = tunnel[event_name]) {
        handlers = event_data.handlers, last_args = event_data.last_args;
        handlers.push(handler);
        if (last_args) {
          handler.apply(null, last_args);
        }
      } else {
        tunnel[event_name] = new PromisedEventData({
          handlers: [handler]
        });
      }
    } else {
      tunnel = SimpleTunnels[tunnel_name] = SimpleTunnels[tunnel_name] || {};
      handlers = tunnel[event_name] = tunnel[event_name] || [];
      handlers.push(handler);
    }
  };
  return {
    emit: emit,
    emit_promised: emit_promised,
    listen: listen
  };
});
